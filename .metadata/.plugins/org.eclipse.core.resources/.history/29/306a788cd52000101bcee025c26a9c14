package com.dealer.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.dealer.feign.DealerInterface;
import com.dealer.feign.PaymentInterface;
import com.dealer.model.BankDetails;
import com.dealer.model.Booking;
import com.dealer.model.CropWrapper;
import com.dealer.model.Dealer;
import com.dealer.model.PaymentWrapper;
import com.dealer.repo.BankDetailsRepo;
import com.dealer.repo.BookingRepo;
import com.dealer.repo.DealerRepo;
import com.dealer.repo.paymentRepo;

import feign.FeignException;

@Service
public class DealerService {

	@Autowired
	DealerRepo dealerRepo;

	@Autowired
	BankDetailsRepo bankRepo;

	@Autowired
	DealerInterface dealerInterface;

	@Autowired
	PaymentInterface paymentInterface;

	@Autowired
	BookingRepo bookingRepo;

	@Autowired
	paymentRepo paymentRepo;

	public ResponseEntity<List<Dealer>> getAllDealers() {
		try {
			return new ResponseEntity<>(dealerRepo.findAll(), HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ResponseEntity<>(new ArrayList<>(), HttpStatus.BAD_REQUEST);
	}

	public String deleteDealerById(int id) {
		dealerRepo.deleteById(id);
		return "Dealer deleted succesfully";
	}

	public ResponseEntity<String> registerDealer(Dealer dealer) {
		dealerRepo.save(dealer);
		return new ResponseEntity<>(dealer.getFirst_name() + " you have registered successfully as a Dealer.", HttpStatus.CREATED);
	}

	public ResponseEntity<Optional<Dealer>> getDealerProfileDetailsById(int id) {
		try {
			Optional<Dealer> dealer = dealerRepo.findById(id);
			return new ResponseEntity<>(dealer, HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
	}

	public ResponseEntity<String> editDealerProfile(int id, Dealer dealer) {
		if (dealerRepo.existsById(id)) {
			dealer.setDealer_id(id);
			dealerRepo.save(dealer);
			return new ResponseEntity<>(dealer.getFirst_name() + " your profile has updated successfully.", HttpStatus.OK);
		}
		return new ResponseEntity<>("Dealer not found", HttpStatus.CREATED);
	}

	public ResponseEntity<String> addBankDetails(int dealerId, BankDetails bankDetails) {
		Optional<Dealer> optionalDealer = dealerRepo.findById(dealerId);

		if (optionalDealer.isPresent()) {
			Dealer dealer = optionalDealer.get();

			BankDetails savedBank = bankRepo.save(bankDetails);

			dealer.setBankDetails(savedBank);
			dealerRepo.save(dealer);

			return new ResponseEntity<>("Bank details added successfully", HttpStatus.OK);
		} else {
			return new ResponseEntity<>("Dealer not found", HttpStatus.NOT_FOUND);
		}
	}

	public ResponseEntity<String> updateBankDetails(int dealerId, BankDetails newDetails) {
		Optional<Dealer> optionalDealer = dealerRepo.findById(dealerId);

		if (optionalDealer.isPresent()) {
			Dealer dealer = optionalDealer.get();

			BankDetails existing = dealer.getBankDetails();

			if (existing == null) {
				return new ResponseEntity<>("No existing bank details found.please add bank details",
						HttpStatus.NOT_FOUND);
			}

			existing.setBankName(newDetails.getBankName());
			existing.setAccountNumber(newDetails.getAccountNumber());
			existing.setIfscCode(newDetails.getIfscCode());
			existing.setUpiId(newDetails.getUpiId());
			existing.setUpiNumber(newDetails.getUpiNumber());

			bankRepo.save(existing);

			return new ResponseEntity<>("Bank details updated successfully", HttpStatus.OK);
		}
		return new ResponseEntity<>("Dealer not found", HttpStatus.NOT_FOUND);
	}

	public ResponseEntity<List<CropWrapper>> getAllCrops() {
		return ResponseEntity.ok(dealerInterface.getAllCrops()).getBody();
	}

//	public ResponseEntity<String> bookCrop(int cropId, int dealerId, double quantity) {
//		ResponseEntity<String> cropResponse = dealerInterface.bookCropByDealer(cropId, quantity);
//		if (cropResponse.getStatusCode().is2xxSuccessful()) {
//			Booking booking = new Booking();
//			booking.setCropId(cropId);
//			booking.setDealerId(dealerId);
//			booking.setQuantity(quantity);
//			Double pricePerKg = dealerInterface.getCropDetails(cropId).getBody().getPricePerKg();
//			booking.setPrice(quantity * pricePerKg);
//
//			bookingRepo.save(booking);
//			return new ResponseEntity<>(quantity + " KG Booking successful and recorded", HttpStatus.OK);
//		}
//		return cropResponse;
//	}

	public ResponseEntity<String> bookCrop(int cropId, int dealerId, double quantity) {
		try {
			dealerInterface.bookCropByDealer(cropId, quantity);

			Booking booking = new Booking();
			booking.setCropId(cropId);
			booking.setDealerId(dealerId);
			booking.setQuantity(quantity);

			Double pricePerKg = dealerInterface.getCropDetails(cropId).getBody().getPricePerKg();
			booking.setPrice(quantity * pricePerKg);

			bookingRepo.save(booking);
			return new ResponseEntity<>(quantity + " KG Booking successful and recorded.\nTotal cost is " + (quantity * pricePerKg), HttpStatus.OK);

		} catch (FeignException.BadRequest ex) {
			return new ResponseEntity<>(ex.contentUTF8(), HttpStatus.BAD_REQUEST);
		} catch (FeignException ex) {
			return new ResponseEntity<>("Crop service error: " + ex.status(), HttpStatus.SERVICE_UNAVAILABLE);
		} catch (Exception ex) {
			return new ResponseEntity<>("Internal server error" + ex.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	public ResponseEntity<String> cancelCropBooking(int cropId, int dealerId, double quantity) {
		ResponseEntity<String> cropResponse = dealerInterface.cancelCropBooking(cropId, quantity);
		Double pricePerKg = dealerInterface.getCropDetails(cropId).getBody().getPricePerKg();
//	    System.out.println(dealerInterface.getCropDetails(cropId).getBody().getPricePerKg());
		Booking booking = new Booking();
		if (cropResponse.getStatusCode().is2xxSuccessful()) {
			booking.setCropId(cropId);
			booking.setDealerId(dealerId);
			booking.setQuantity(booking.getQuantity() + quantity);
			booking.setCancelled(true);
			booking.setPrice(quantity * pricePerKg);
			bookingRepo.save(booking);
			return new ResponseEntity<>("Booking cancelled: " + quantity + " KG returned", HttpStatus.OK);
		}
		return cropResponse;
	}

	public List<Booking> getBookingsByDealer(int dealerId) {
		return bookingRepo.findByDealerId(dealerId);
	}

	public List<CropWrapper> getBookedCropDetails() {
		List<Booking> bookings = bookingRepo.findAll();
		return bookings.stream().map(b -> dealerInterface.getCropDetails(b.getCropId()).getBody())
				.collect(Collectors.toList());
	}

//	public ResponseEntity<String> pay(PaymentWrapper wrapper) {
//		PaymentWrapper payment = new PaymentWrapper();
//		System.out.println(wrapper.getCropId() + " " + wrapper.getDealerId());
//		payment.setDealerId(wrapper.getDealerId());
//		payment.setCropId(wrapper.getCropId());
//		payment.setAmount(wrapper.getAmount());
//		paymentRepo.save(payment);
//		List<Booking> bookinglist = bookingRepo.findAll();
//		for (Booking b : bookinglist) {
//			System.out.println("Wrapper Crop ID: " + wrapper.getCropId() + ", Booking Crop ID: " + b.getCropId());
//			System.out.println("Wrapper Amount: " + wrapper.getAmount() + ", Booking Price: " + b.getPrice());
//			System.out
//					.println("Wrapper Dealer ID: " + wrapper.getDealerId() + ", Booking Dealer ID: " + b.getDealerId());
//
//			boolean cropMatch = wrapper.getCropId() == b.getCropId();
//			boolean amountMatch = wrapper.getAmount() == b.getPrice();
//			boolean dealerMatch = wrapper.getDealerId() == b.getDealerId();
//
//			System.out.println("Crop ID Match: " + cropMatch);
//			System.out.println("Amount Match: " + amountMatch);
//			System.out.println("Dealer ID Match: " + dealerMatch);
//
////		!b.isCancelled() &&
//			if (cropMatch && amountMatch && dealerMatch) {
//
//				System.out.println("Saving new payment");
//
//				ResponseEntity<PaymentWrapper> response = paymentInterface.pay(payment);
//				System.out.println("Saving new payment: " + payment);
//				System.out.println("Saving new payment: " + response);
//				if (response.getStatusCode().is2xxSuccessful()) {
//					return ResponseEntity.ok("Payment Successful");
//				}
//			}
//		}
//		return ResponseEntity.status(500).body("No valid booking found for payment details.");
//	}

	public ResponseEntity<String> pay(PaymentWrapper wrapper) {
		PaymentWrapper payment = new PaymentWrapper();
		System.out.println(wrapper.getCropId() + " " + wrapper.getDealerId());
		payment.setDealerId(wrapper.getDealerId());
		payment.setCropId(wrapper.getCropId());
		payment.setAmount(wrapper.getAmount());
		paymentRepo.save(payment);

		List<Booking> bookinglist = bookingRepo.findAll();
		for (Booking b : bookinglist) {
			System.out.println("Wrapper Crop ID: " + wrapper.getCropId() + ", Booking Crop ID: " + b.getCropId());
			System.out.println("Wrapper Amount: " + wrapper.getAmount() + ", Booking Price: " + b.getPrice());
			System.out
					.println("Wrapper Dealer ID: " + wrapper.getDealerId() + ", Booking Dealer ID: " + b.getDealerId());

			boolean cropMatch = wrapper.getCropId() == b.getCropId();
			boolean amountMatch = wrapper.getAmount() == b.getPrice();
			boolean dealerMatch = wrapper.getDealerId() == b.getDealerId();

			System.out.println("Crop ID Match: " + cropMatch);
			System.out.println("Amount Match: " + amountMatch);
			System.out.println("Dealer ID Match: " + dealerMatch);

			if (cropMatch && amountMatch && dealerMatch) {
				System.out.println("Saving new payment");
				ResponseEntity<PaymentWrapper> response = paymentInterface.pay(payment);
				
				if (response.getStatusCode().is2xxSuccessful()) {
					String receipt = String.format(
							"----- Payment Receipt -----\n" + "Dealer ID  : %d\n" + "Crop ID    : %d\n"
									+ "Amount Paid: %.2f\n" + "Booking ID : %d\n" + "Booking Date: %s\n"
									+ "----------------------------\n" + "Thank you for your payment!",
							b.getDealerId(), b.getCropId(), b.getPrice(), b.getId(), b.getTime().toLocalDate());
					return ResponseEntity.ok(receipt);
				}
			}
		}
		return ResponseEntity.status(500).body("No valid booking found for payment details.");
	}

}
