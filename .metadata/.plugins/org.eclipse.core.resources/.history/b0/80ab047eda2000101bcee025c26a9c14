package com.notify.consumer;

import java.util.ArrayList;
import java.util.List;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import com.notify.config.RabbitConfig;
import com.notify.feign.DealerInterface;
import com.notify.model.CropDto;
import com.notify.model.NotificationPayload;

import org.springframework.mail.javamail.JavaMailSender;

import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import org.springframework.mail.javamail.MimeMessageHelper;

@Component
public class UserConsumer {

	@Value("${notification.queue}")
	private String queue;

	@Autowired
	private JavaMailSender mailSender;

	@Autowired
	DealerInterface dealerInterface;

	@RabbitListener(queues = RabbitConfig.QUEUE)
	public void consumeMessageFromQueue(CropDto crop) {

//		String message = "New crop is published Crop Name : " + crop.getCropName() + " Crop Type : "
//				+ crop.getCropType() + " Available Quantity : " + crop.getQuantityAvailable() + " Price per kg : "
//				+ crop.getPricePerKg() + " Rs " + " Check App/Website for more details. Notification from RabbitMQ...";

//		String message =
//			    "ðŸ“¢ New Crop Published!\n\n" +
//			    "ðŸŒ¾ Crop Name       : " + crop.getCropName() + "\n" +
//			    "ðŸŒ± Crop Type       : " + crop.getCropType() + "\n" +
//			    "ðŸ“¦ Available Qty   : " + crop.getQuantityAvailable() + " KG\n" +
//			    " Price per KG    : â‚¹" + crop.getPricePerKg() + "\n\n" +
//			    " Check the app/website for more details.";
		
		String message = "<h3>ðŸ“¢ New Crop Published!</h3>" +
                "<p><strong>ðŸŒ¾ Crop Name:</strong> " + crop.getCropName() + "</p>" +
                "<p><strong>ðŸŒ± Crop Type:</strong> " + crop.getCropType() + "</p>" +
                "<p><strong>ðŸ“¦ Available Quantity:</strong> " + crop.getQuantityAvailable() + " KG</p>" +
                "<p><strong>ðŸ’° Price per KG:</strong> â‚¹" + crop.getPricePerKg() + "</p>" +
                "<br><p>ðŸ‘‰ Check the <a href='https://miro.com/app/board/uXjVIDEQ4g8=/'>App/Website</a> for more details.</p>";



		List<String> emails = new ArrayList<>();
//		emails.add("kshitijmulay411@gmail.com");

		 emails=dealerInterface.getAllDealerEmails();

		NotificationPayload payload = new NotificationPayload();

		payload.setSubject("New Crop Published!");
		payload.setTo(emails);
		payload.setBody(message);

		notifyDealers(payload);

		System.out.println("Message recieved from queue : " + crop);
	}

	public ResponseEntity<String> notifyDealers(NotificationPayload payload) {
		try {
			MimeMessage message = mailSender.createMimeMessage();
			MimeMessageHelper helper = new MimeMessageHelper(message, true);

			helper.setSubject(payload.getSubject());
			helper.setText(payload.getBody(), true);
			helper.setFrom("kshitijmulay411@gmail.com");
			for (String email : payload.getTo()) {
				helper.addBcc(email);
			}

			mailSender.send(message);
			return ResponseEntity.ok("Notification sent to all dealers");
		} catch (MessagingException e) {
			return ResponseEntity.status(500).body("Failed to send notification: " + e.getMessage());
		}
	}

}