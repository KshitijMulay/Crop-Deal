package com.crop.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.crop.model.Crop;
import com.crop.repo.CropRepo;

@Service
public class CropService {

	@Autowired
	CropRepo cropRepo;

	public ResponseEntity<List<Crop>> getAllCrops() {
		try {
			return new ResponseEntity<>(cropRepo.findAll(), HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ResponseEntity<>(new ArrayList<>(), HttpStatus.BAD_REQUEST);
	}

	public ResponseEntity<Optional<Crop>> getCropDetailsById(int id) {
		try {
			Optional<Crop> crop = cropRepo.findById(id);
			return new ResponseEntity<>(crop, HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
	}

	public ResponseEntity<String> publishCrop(Crop crop) {
		crop.setTotalAvailableCost(crop.getQuantityAvailable() * crop.getPricePerKg());
		crop.setTotalBookedCost(crop.getQuantityBooked() * crop.getPricePerKg());
		cropRepo.save(crop);
		return new ResponseEntity<>("Crop registered successfully", HttpStatus.CREATED);
	}

	public ResponseEntity<String> editCrop(int id, Crop crop) {
		if (cropRepo.existsById(id)) {
			crop.setCropId(id);
			cropRepo.save(crop);
			return new ResponseEntity<>("Crop updated successfully", HttpStatus.OK);
		}
		return new ResponseEntity<>("Crop not found", HttpStatus.CREATED);
	}

	public ResponseEntity<String> deleteCropById(int id) {
		if (cropRepo.existsById(id)) {
			cropRepo.deleteById(id);
			return ResponseEntity.ok("Crop deleted successfully");
		} else {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Crop with ID " + id + " does not exist");
		}
	}

//	public ResponseEntity<String> bookCropByDealer(int crop_id, double quantity) {
//	    Optional<Crop> optionalCrop = cropRepo.findById(crop_id);
//	    if (optionalCrop.isEmpty()) {
//	        return new ResponseEntity<>("Crop not found", HttpStatus.NOT_FOUND);
//	    }
//
//	    Crop crop = optionalCrop.get();
//	    if (crop.getQuantity_available() < quantity) {
//	        return new ResponseEntity<>("Insufficient quantity available", HttpStatus.BAD_REQUEST);
//	    }
//
//	    crop.setQuantity_available(crop.getQuantity_available() - quantity);
//	    crop.setQuantity_booked(crop.getQuantity_booked() + quantity);
//
//	    if (crop.getQuantity_available() == 0) {
//	        crop.setStatus("Booked");
//	    }
//
//	    cropRepo.save(crop);
//	    return new ResponseEntity<>("Crop booked: " + quantity + " KG", HttpStatus.OK);
//	}

	public ResponseEntity<String> bookCropByDealer(int crop_id, double quantity) {
		Optional<Crop> optionalCrop = cropRepo.findById(crop_id);
		if (optionalCrop.isEmpty()) {
			return new ResponseEntity<>("Crop not found", HttpStatus.NOT_FOUND);
		}

		Crop crop = optionalCrop.get();

		if (crop.getQuantityAvailable() == null)
			crop.setQuantityAvailable(0.0);
		if (crop.getQuantityBooked() == null)
			crop.setQuantityBooked(0.0);

		if (crop.getQuantityAvailable() < quantity) {
			return new ResponseEntity<>("Insufficient quantity", HttpStatus.BAD_REQUEST);
		}

		crop.setQuantityAvailable(crop.getQuantityAvailable() - quantity);
		crop.setQuantityBooked(crop.getQuantityBooked() + quantity);

		if (crop.getQuantityAvailable() == 0) {
			crop.setStatus("Booked");
		}

		crop.setTotalAvailableCost(crop.getQuantityAvailable() * crop.getPricePerKg());
		crop.setTotalBookedCost(crop.getQuantityBooked() * crop.getPricePerKg());

		cropRepo.save(crop);
		return new ResponseEntity<>("Crop booked successfully of " + quantity + " KG", HttpStatus.OK);
	}

	public ResponseEntity<String> cancelCropBooking(int crop_id, double quantity) {
		Optional<Crop> optionalCrop = cropRepo.findById(crop_id);
		if (optionalCrop.isEmpty()) {
			return new ResponseEntity<>("Crop not found", HttpStatus.NOT_FOUND);
		}

		Crop crop = optionalCrop.get();
		crop.setQuantityAvailable(crop.getQuantityAvailable() + quantity);
		crop.setQuantityBooked(crop.getQuantityBooked() - quantity);
		crop.setTotalAvailableCost(crop.getQuantityAvailable() * crop.getPricePerKg());
		crop.setTotalBookedCost(crop.getQuantityBooked() * crop.getPricePerKg());

		crop.setStatus("Available");
		cropRepo.save(crop);

		return new ResponseEntity<>("Booking cancelled and removed from records", HttpStatus.OK);
	}

	public ResponseEntity<List<Crop>> getCropsByFarmer(int farmerId) {
		return new ResponseEntity<>(cropRepo.findByFarmerId(farmerId), HttpStatus.OK);
	}

	public ResponseEntity<List<Crop>> getAvailableCrops() {
		return ResponseEntity.ok(cropRepo.findByQuantityAvailableGreaterThan(0.0));
	}

	public ResponseEntity<List<Crop>> getFullyBookedCrops() {
		return ResponseEntity.ok(cropRepo.findByQuantityAvailableEquals(0.0));
	}

	public ResponseEntity<String> getCropStatus(int cropId) {
		return cropRepo.findById(cropId).map(crop -> ResponseEntity.ok("Status: " + crop.getStatus()))
				.orElse(ResponseEntity.notFound().build());
	}
	
	//--------------review------------------
	
		//1 get all reviews 
		@GetMapping("/reviews")
		public ResponseEntity<List<Review>> allReviews(){
		    return crop_service.allReviews();
		}
		
		//2 get all reviews by crop id 
		@GetMapping("/reviews/{crop_id}")
		public ResponseEntity<List<Review>> allReviewsByCropId(@PathVariable int crop_id ){
		    return crop_service.allReviewsByCropId(crop_id);
		}
		
		//3.post review -- dealer
		@PostMapping("/review/post/{crop_id}")
		public ResponseEntity<String> postReview(@RequestParam("dealer_id") int dealerId, @PathVariable("crop_id") int crop_id ,@RequestBody Review review)
		{
			return crop_service.postReview(dealerId,crop_id,review);
		}
		
//		//4.edit review -- dealer / admin  
//		@PutMapping("/review/edit/{crop_id}")
//		public ResponseEntity<String> editReview(@RequestParam("dealer_id") int dealer_id, @PathVariable("crop_id") int crop_id ,@RequestBody Review review)
//		{
//			return crop_service.editReview(dealer_id,crop_id,review);
//		}
		
		//5.delete review -- admin
		@DeleteMapping("/review/delete/{review_id}")
		public ResponseEntity<String> deleteReview( @PathVariable("review_id") int review_id)
		{
			return crop_service.deleteReview(review_id);
		}
		
		//6.get average rating of crop 
		@GetMapping("/review/average-rating/{crop_id}")
		public ResponseEntity<String> getAverage(@PathVariable("crop_id") int crop_id)
		{
			return crop_service.getAverage(crop_id);
		}

}
